{"version":3,"sources":["my_great_place.jsx","App.js","serviceWorker.js","index.js"],"names":["greatPlaceStyle","position","width","height","left","top","border","borderRadius","backgroundColor","textAlign","color","fontSize","fontWeight","padding","MyGreatPlace","style","this","props","text","React","Component","lat","lon","console","log","App","_onClick","x","y","lng","event","setState","mar","state","client","publish","toString","gps","rad","mqtt","connect","on","subscribe","err","abhidekhtehain","bind","fetchmar","radiuschanged","topic","message","changeLat","parseFloat","changeLon","changeMarLat","changeMarLon","newrad","newLat","href","target","rel","to","path","gpslat","gpslon","LiveTracker","bootstrapURLKeys","key","defaultZoom","defaultCenter","GetMarkerLocation","renderMarkers","changerad","prevProps","circle","setCenter","setRadius","e","getRadius","map","maps","latlng","window","google","Circle","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","center","radius","editable","setMap","addListener","onClick","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oWAOMA,EAAkB,CAGpBC,SAAU,WACVC,MAPY,GAQZC,OAPa,GAQbC,MAAM,GACNC,KAAK,GAELC,OAAQ,oBACRC,aAZa,GAabC,gBAAiB,QACjBC,UAAW,SACXC,MAAO,UACPC,SAAU,EACVC,WAAY,OACZC,QAAS,GAKQC,E,iLAMb,OACI,yBAAKC,MAAOf,GACPgB,KAAKC,MAAMC,U,GARcC,IAAMC,W,gBCd5CC,EAAM,OAAQC,EAAM,UACpBjB,EAAM,eACVkB,QAAQC,IAAI,S,IAENC,E,YACL,WAAYR,GAAQ,IAAD,8BAClB,4CAAMA,KA6CPS,SAAW,YAA+B,EAA5BC,EAA4B,EAAzBC,EAA0B,IAAvBP,EAAsB,EAAtBA,IAAKQ,EAAiB,EAAjBA,IAAiB,EAAZC,MAC7B,EAAKC,SAAS,CAAEC,IAAK,CAAEV,IAAKO,EAAKR,IAAKA,KACtC,EAAKY,MAAMC,OAAOC,QAAQ9B,EAAM,eAAgBwB,EAAIO,YACpD,EAAKH,MAAMC,OAAOC,QAAQ9B,EAAM,eAAgBgB,EAAIe,aA/CpD,EAAKH,MAAQ,CACZI,IAAK,CACJhB,IAAKA,EACLC,IAAKA,GAENU,IAAK,CACJX,IAAKA,EACLC,IAAKA,GAENgB,IAAK,EACLJ,OAAQK,IAAKC,QAAQ,8CAEtB,EAAKP,MAAMC,OAAOO,GAAG,WAAW,WAC/BlB,QAAQC,IAAI,kBACZR,KAAK0B,UAAU,kBAAkB,SAAUC,GACrCA,GACJpB,QAAQC,IAAI,oBAIf,EAAKoB,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKZ,MAAMC,OAAOO,GAAG,UAAW,EAAKG,gBACrC,EAAKlB,SAAW,EAAKA,SAASmB,KAAd,gBAChB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBA1BH,E,4EA6BJG,EAAOC,GACrB1B,QAAQC,IAAIwB,EAAOC,EAAQb,YACvBY,IAAW3C,EAAM,OACpBW,KAAKkC,UAAUC,WAAWF,EAAQb,aAC1BY,IAAW3C,EAAM,OACzBW,KAAKoC,UAAUD,WAAWF,EAAQb,aAC1BY,IAAW3C,EAAM,WACzBW,KAAKqC,aAAaF,WAAWF,EAAQb,aAE7BY,IAAW3C,EAAM,WACzBW,KAAKsC,aAAaH,WAAWF,EAAQb,aAG7BY,IAAW3C,EAAM,YACzBW,KAAKe,SAAS,CAAEO,IAAKa,WAAWF,EAAQb,gB,oCAQ5BmB,GACbvC,KAAKiB,MAAMC,OAAOC,QAAQ9B,EAAM,eAAgBkD,EAAOnB,YACvDpB,KAAKe,SAAS,CAAEO,IAAKiB,M,mCAGTC,GACRA,IAAWxC,KAAKiB,MAAMD,IAAIX,MAC7BE,QAAQC,IAAIgC,GACZxC,KAAKe,SAAS,CAAEC,IAAK,CAAEX,IAAKmC,EAAQlC,IAAKN,KAAKiB,MAAMD,IAAIV,QAEzDC,QAAQC,IAAIR,KAAKiB,MAAMD,O,mCAKXwB,GACRA,IAAWxC,KAAKiB,MAAMD,IAAIV,MAC7BC,QAAQC,IAAIgC,GACZxC,KAAKe,SAAS,CAAEC,IAAK,CAAEV,IAAKkC,EAAQnC,IAAKL,KAAKiB,MAAMD,IAAIX,QAEzDE,QAAQC,IAAIR,KAAKiB,MAAMD,O,gCAIdwB,GACLA,IAAWxC,KAAKiB,MAAMI,IAAIhB,MAC7BE,QAAQC,IAAIgC,GACZxC,KAAKe,SAAS,CAAEM,IAAK,CAAEhB,IAAKmC,EAAQlC,IAAKN,KAAKiB,MAAMI,IAAIf,U,gCAGhDkC,GACLA,IAAWxC,KAAKiB,MAAMI,IAAIf,MAC7BC,QAAQC,IAAIgC,GACZxC,KAAKe,SAAS,CAAEM,IAAK,CAAEf,IAAKkC,EAAQnC,IAAKL,KAAKiB,MAAMI,IAAIhB,U,iCAKzDE,QAAQC,IAAI,QACZR,KAAKiB,MAAMC,OAAOC,QAAQ9B,EAAM,aAAc,W,+BAI9C,OACC,kBAAC,IAAD,KACC,6BACC,6BACC,4BACC,4BACC,uBAAGoD,KACF,mDACEzC,KAAKiB,MAAMI,IAAIhB,IAAM,IAAML,KAAKiB,MAAMI,IAAIf,IAC5CoC,OAAO,SAASC,IAAI,uBAHrB,2BAKD,4BACC,kBAAC,IAAD,CAAMC,GAAG,sBAAT,wBAED,4BACC,kBAAC,IAAD,CAAMA,GAAG,iBAAT,6BAQH,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,iBACX,kBAAE,EAAF,CAAcxC,IAAKL,KAAKiB,MAAMI,IAAIhB,IAAKC,IAAKN,KAAKiB,MAAMI,IAAIf,OAE5D,kBAAC,IAAD,CAAOuC,KAAK,sBACX,kBAAE,EAAF,CAAoBxC,IAAKL,KAAKiB,MAAMD,IAAIX,IACvCC,IAAKN,KAAKiB,MAAMD,IAAIV,IACpBI,SAAUV,KAAKU,SACfoB,SAAU9B,KAAK8B,SACfR,IAAKtB,KAAKiB,MAAMK,IAChBwB,OAAQ9C,KAAKiB,MAAMI,IAAIhB,IACvB0C,OAAQ/C,KAAKiB,MAAMI,IAAIf,IACvByB,cAAe/B,KAAK+B,wB,GAlIV5B,IAAMC,WA4IlB4C,E,iLAIJ,OACC,yBAAKjD,MAAO,CAAEZ,OAAQ,QAASD,MAAO,SAErC,kBAAC,IAAD,CACC+D,iBAAkB,CACjBC,IAAK,CAAC,kDAEPC,YAAa,EACbC,cACC,CAAE/C,IAAK,GAAIQ,IAAK,KAGjB,kBAAC,EAAD,CACCR,IAAKL,KAAKC,MAAMI,IAChBQ,IAAKb,KAAKC,MAAMK,IAChBJ,KAAK,gB,GAnBeC,IAAMC,WA4B1BiD,E,YAEL,WAAYpD,GAAQ,IAAD,8BAClB,4CAAMA,KACDA,MAAM6B,WAEX,EAAKwB,cAAgB,EAAKA,cAAczB,KAAnB,gBACrB,EAAK0B,UAAY,EAAKA,UAAU1B,KAAf,gBALC,E,gFAQA2B,GAClBjD,QAAQC,IAAIR,KAAKC,OACbuD,EAAUnD,MAAQL,KAAKC,MAAMI,KAAOmD,EAAUlD,MAAQN,KAAKC,MAAMK,KAChEN,KAAKiB,OAASjB,KAAKiB,MAAMwC,QAC5BzD,KAAKiB,MAAMwC,OAAOC,UAAU,CAAErD,IAAKL,KAAKC,MAAMI,IAAKQ,IAAKb,KAAKC,MAAMK,MAEjEkD,EAAUlC,MAAQtB,KAAKC,MAAMqB,KAAOtB,KAAKiB,MAAMwC,QAClDzD,KAAKiB,MAAMwC,OAAOE,UAAU3D,KAAKC,MAAMqB,O,gCAG/BsC,GACT,IAAItC,EAAMtB,KAAKiB,MAAMwC,OAAOI,YAC5B7D,KAAKC,MAAM8B,cAAcT,K,oCAGZwC,EAAKC,GAClB,IAAIC,EAAS,CACZ3D,IAAKL,KAAKC,MAAMI,IAChBQ,IAAKb,KAAKC,MAAMK,KAEbmD,EAAS,IAAIQ,OAAOC,OAAOH,KAAKI,OAAO,CAC1CC,YAAa,UACbC,cAAe,GACfC,aAAc,EACdC,UAAW,UACXC,YAAa,GACbC,OAAQT,EACRU,OAAQ,IACRC,UAAU,IAEXlB,EAAOC,UAAUM,GACjBP,EAAOmB,OAAOd,GACd9D,KAAKe,SAAS,CAAE0C,OAAQA,IACxBzD,KAAKiB,MAAMwC,OAAOoB,YAAY,iBAAkB7E,KAAKuD,a,+BAG5C,IAAD,OAER,OACC,yBAAKxD,MAAO,CAAEZ,OAAQ,QAASD,MAAO,SAErC,kBAAC,IAAD,CACC+D,iBAAkB,CACjBC,IAAK,CAAC,kDAEPC,YAAa,EACbC,cACC,CAAE/C,IAAK,GAAIQ,IAAK,IAEjBiE,QAAS9E,KAAKC,MAAMS,SACpBqE,oCAAoC,EACpCC,kBAAmB,gBAAGlB,EAAH,EAAGA,IAAKC,EAAR,EAAQA,KAAR,OAAmB,EAAKT,cAAcQ,EAAKC,EAAM,EAAK9D,MAAMY,OAE/E,kBAAC,EAAD,CACCR,IAAKL,KAAKC,MAAM6C,OAChBjC,IAAKb,KAAKC,MAAM8C,OAChB7C,KAAK,gB,GAlEqBC,IAAMC,WA2EvBK,ICzPKwE,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b54108d3.chunk.js","sourcesContent":["// import React, { PropTypes, Component } from 'react/addons';\nimport React from 'react'\n// import shouldPureComponentUpdate from 'react-pure-render/function';\n\nconst K_WIDTH = 20;\nconst K_HEIGHT = 20;\n\nconst greatPlaceStyle = {\n    // initially any map object has left top corner at lat lng coordinates\n    // it's on you to set object origin to 0,0 coordinates\n    position: 'absolute',\n    width: K_WIDTH,\n    height: K_HEIGHT,\n    left: -K_WIDTH / 2,\n    top: -K_HEIGHT / 2,\n\n    border: '5px solid #f44336',\n    borderRadius: K_HEIGHT,\n    backgroundColor: 'white',\n    textAlign: 'center',\n    color: '#3f51b5',\n    fontSize: 9,\n    fontWeight: 'bold',\n    padding: 4\n};\n\nexport { greatPlaceStyle };\n\nexport default class MyGreatPlace extends React.Component {\n\n\n    // static defaultProps = {};\n\n    render() {\n        return (\n            <div style={greatPlaceStyle}>\n                {this.props.text}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport './App.css';\nimport mqtt from 'mqtt';\nimport MyGreatPlace from './my_great_place.jsx';\nimport {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRoute,\n\tLink\n} from \"react-router-dom\";\n\n\n// let client = mqtt.connect('mqtt://broker.mqttdashboard.com:8000/mqtt');\nlet lat = 26.444, lon = 91.691582;\nlet top = \"semsLocation\";\nconsole.log('start');\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tgps: {\n\t\t\t\tlat: lat,\n\t\t\t\tlon: lon,\n\t\t\t},\n\t\t\tmar: {\n\t\t\t\tlat: lat,\n\t\t\t\tlon: lon,\n\t\t\t},\n\t\t\trad: 0,\n\t\t\tclient: mqtt.connect('mqtt://broker.mqttdashboard.com:8000/mqtt'),\n\t\t};\n\t\tthis.state.client.on('connect', function () {\n\t\t\tconsole.log('mqtt connected');\n\t\t\tthis.subscribe('semsLocation/#', function (err) {\n\t\t\t\tif (!err) {\n\t\t\t\t\tconsole.log('subscribed');\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t\tthis.abhidekhtehain = this.abhidekhtehain.bind(this);\n\t\tthis.state.client.on('message', this.abhidekhtehain);\n\t\tthis._onClick = this._onClick.bind(this);\n\t\tthis.fetchmar = this.fetchmar.bind(this);\n\t\tthis.radiuschanged = this.radiuschanged.bind(this);\n\t}\n\n\tabhidekhtehain(topic, message) {\n\t\tconsole.log(topic, message.toString());\n\t\tif (topic === (top + '/lat'))\n\t\t\tthis.changeLat(parseFloat(message.toString()));\n\t\telse if (topic === (top + '/lng'))\n\t\t\tthis.changeLon(parseFloat(message.toString()));\n\t\telse if (topic === (top + '/mar/lat')) {\n\t\t\tthis.changeMarLat(parseFloat(message.toString()));\n\t\t}\n\t\telse if (topic === (top + '/mar/lon')) {\n\t\t\tthis.changeMarLon(parseFloat(message.toString()));\n\t\t}\n\t\t// this.changeLon(parseFloat(message.toString()));\n\t\telse if (topic === (top + '/mar/rad'))\n\t\t\tthis.setState({ rad: parseFloat(message.toString()) });\n\n\t}\n\t_onClick = ({ x, y, lat, lng, event }) => {\n\t\tthis.setState({ mar: { lon: lng, lat: lat } })\n\t\tthis.state.client.publish(top + \"/mar/set/lon\", lng.toString());\n\t\tthis.state.client.publish(top + \"/mar/set/lat\", lat.toString());\n\t}\n\tradiuschanged(newrad) {\n\t\tthis.state.client.publish(top + '/mar/set/rad', newrad.toString());\n\t\tthis.setState({ rad: newrad });\n\t}\n\n\tchangeMarLat(newLat) {\n\t\tif (newLat !== this.state.mar.lat) {\n\t\t\tconsole.log(newLat);\n\t\t\tthis.setState({ mar: { lat: newLat, lon: this.state.mar.lon } });\n\t\t}\n\t\tconsole.log(this.state.mar);\n\n\t}\n\n\n\tchangeMarLon(newLat) {\n\t\tif (newLat !== this.state.mar.lon) {\n\t\t\tconsole.log(newLat);\n\t\t\tthis.setState({ mar: { lon: newLat, lat: this.state.mar.lat } });\n\t\t}\n\t\tconsole.log(this.state.mar);\n\n\t}\n\n\tchangeLat(newLat) {\n\t\tif (newLat !== this.state.gps.lat) {\n\t\t\tconsole.log(newLat);\n\t\t\tthis.setState({ gps: { lat: newLat, lon: this.state.gps.lon } });\n\t\t}\n\t}\n\tchangeLon(newLat) {\n\t\tif (newLat !== this.state.gps.lon) {\n\t\t\tconsole.log(newLat);\n\t\t\tthis.setState({ gps: { lon: newLat, lat: this.state.gps.lat } });\n\t\t}\n\t}\n\n\tfetchmar() {\n\t\tconsole.log('hehe');\n\t\tthis.state.client.publish(top + '/mar/fetch', 'fetch');\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<div>\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<a href={\n\t\t\t\t\t\t\t\t\t'https://www.google.com/maps/search/?api=1&query='\n\t\t\t\t\t\t\t\t\t+ this.state.gps.lat + ',' + this.state.gps.lon}\n\t\t\t\t\t\t\t\t\ttarget='_blank' rel=\"noopener noreferrer\">Directions to my cycle</a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/getMarkerLocation\">Get Marker Location</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/liveTracking\">Live Tracking of Cycle</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</nav>\n\n\t\t\t\t\t{/* A <Switch> looks through its children <Route>s and\n\t\t\trenders the first one that matches the current URL. */}\n\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/liveTracking\">\n\t\t\t\t\t\t\t< LiveTracker lat={this.state.gps.lat} lon={this.state.gps.lon} />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/getMarkerLocation\">\n\t\t\t\t\t\t\t< GetMarkerLocation lat={this.state.mar.lat}\n\t\t\t\t\t\t\t\tlon={this.state.mar.lon}\n\t\t\t\t\t\t\t\t_onClick={this._onClick}\n\t\t\t\t\t\t\t\tfetchmar={this.fetchmar}\n\t\t\t\t\t\t\t\trad={this.state.rad}\n\t\t\t\t\t\t\t\tgpslat={this.state.gps.lat}\n\t\t\t\t\t\t\t\tgpslon={this.state.gps.lon}\n\t\t\t\t\t\t\t\tradiuschanged={this.radiuschanged} />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\n\nclass LiveTracker extends React.Component {\n\n\t// _onClick = ({ x, y, lat, lng, event }) => console.log(x, y, lat, lng, event)\n\trender() {\n\t\treturn (\n\t\t\t<div style={{ height: '100vh', width: '100%' }}>\n\n\t\t\t\t<GoogleMapReact\n\t\t\t\t\tbootstrapURLKeys={{\n\t\t\t\t\t\tkey: ['AIzaSyB2j - BLr1 - CgTgSEUjws060kE37S2N - A3A']\n\t\t\t\t\t}}\n\t\t\t\t\tdefaultZoom={8}\n\t\t\t\t\tdefaultCenter={\n\t\t\t\t\t\t{ lat: 26, lng: 91 }\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\t<MyGreatPlace\n\t\t\t\t\t\tlat={this.props.lat}\n\t\t\t\t\t\tlng={this.props.lon}\n\t\t\t\t\t\ttext=\"CYCLE\"\n\t\t\t\t\t/>\n\n\t\t\t\t</GoogleMapReact>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nclass GetMarkerLocation extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.props.fetchmar();\n\t\t// console.log(this.props);\n\t\tthis.renderMarkers = this.renderMarkers.bind(this);\n\t\tthis.changerad = this.changerad.bind(this);\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconsole.log(this.props);\n\t\tif (prevProps.lat !== this.props.lat || prevProps.lon !== this.props.lon) {\n\t\t\tif (this.state && this.state.circle)\n\t\t\t\tthis.state.circle.setCenter({ lat: this.props.lat, lng: this.props.lon });\n\t\t}\n\t\tif (prevProps.rad !== this.props.rad && this.state.circle)\n\t\t\tthis.state.circle.setRadius(this.props.rad);\n\t}\n\n\tchangerad(e) {\n\t\tlet rad = this.state.circle.getRadius();\n\t\tthis.props.radiuschanged(rad);\n\t}\n\n\trenderMarkers(map, maps) {\n\t\tvar latlng = {\n\t\t\tlat: this.props.lat,\n\t\t\tlng: this.props.lon,\n\t\t}\n\t\tvar circle = new window.google.maps.Circle({\n\t\t\tstrokeColor: '#FF0000',\n\t\t\tstrokeOpacity: 0.8,\n\t\t\tstrokeWeight: 2,\n\t\t\tfillColor: '#FF0000',\n\t\t\tfillOpacity: 0.3,\n\t\t\tcenter: latlng,\n\t\t\tradius: 275,\n\t\t\teditable: true,\n\t\t});\n\t\tcircle.setCenter(latlng);\n\t\tcircle.setMap(map);\n\t\tthis.setState({ circle: circle });\n\t\tthis.state.circle.addListener('radius_changed', this.changerad);\n\t}\n\n\trender() {\n\n\t\treturn (\n\t\t\t<div style={{ height: '100vh', width: '100%' }} >\n\n\t\t\t\t<GoogleMapReact\n\t\t\t\t\tbootstrapURLKeys={{\n\t\t\t\t\t\tkey: ['AIzaSyB2j - BLr1 - CgTgSEUjws060kE37S2N - A3A']\n\t\t\t\t\t}}\n\t\t\t\t\tdefaultZoom={8}\n\t\t\t\t\tdefaultCenter={\n\t\t\t\t\t\t{ lat: 26, lng: 91 }\n\t\t\t\t\t}\n\t\t\t\t\tonClick={this.props._onClick}\n\t\t\t\t\tyesIWantToUseGoogleMapApiInternals={true}\n\t\t\t\t\tonGoogleApiLoaded={({ map, maps }) => this.renderMarkers(map, maps, this.props.lng)}\n\t\t\t\t>\n\t\t\t\t\t<MyGreatPlace\n\t\t\t\t\t\tlat={this.props.gpslat}\n\t\t\t\t\t\tlng={this.props.gpslon}\n\t\t\t\t\t\ttext=\"CYCLE\"\n\t\t\t\t\t/>\n\n\t\t\t\t</GoogleMapReact>\n\t\t\t</div >\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}