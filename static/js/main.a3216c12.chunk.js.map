{"version":3,"sources":["my_great_place.jsx","App.js","serviceWorker.js","index.js"],"names":["greatPlaceStyle","position","width","height","left","top","border","borderRadius","backgroundColor","textAlign","color","fontSize","fontWeight","padding","MyGreatPlace","props","style","this","text","React","Component","lat","lon","console","log","App","state","client","mqtt","connect","on","subscribe","err","abhidekhtehain","bind","topic","message","changeLat","parseFloat","toString","changeLon","newLat","setState","className","href","target","rel","type","id","defaultChecked","htmlFor","LiveTracker","bootstrapURLKeys","key","defaultZoom","defaultCenter","lng","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qWAOMA,EAAkB,CAGpBC,SAAU,WACVC,MAPY,GAQZC,OAPa,GAQbC,MAAM,GACNC,KAAK,GAELC,OAAQ,oBACRC,aAZa,GAabC,gBAAiB,QACjBC,UAAW,SACXC,MAAO,UACPC,SAAU,EACVC,WAAY,OACZC,QAAS,GAKQC,E,YAKjB,WAAYC,GAAQ,qEACVA,I,sEAIN,OACI,yBAAKC,MAAOhB,GACPiB,KAAKF,MAAMG,U,GAZcC,IAAMC,WCpB5CC,EAAM,OAAQC,EAAM,UAExBC,QAAQC,IAAI,S,IAENC,E,YACL,WAAYV,GAAQ,IAAD,8BAClB,4CAAMA,KACDW,MAAQ,CACZL,IAAKA,EACLC,IAAKA,EACLK,OAAQC,IAAKC,QAAQ,8CAEtB,EAAKH,MAAMC,OAAOG,GAAG,WAAW,WAC/BP,QAAQC,IAAI,kBACZP,KAAKc,UAAU,kBAAkB,SAAUC,GACrCA,GACJT,QAAQC,IAAI,oBAIf,EAAKS,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKR,MAAMC,OAAOG,GAAG,UAAW,EAAKG,gBAhBnB,E,4EAmBJE,EAAOC,GAEN/B,qBAAX8B,EACHlB,KAAKoB,UAAUC,WAAWF,EAAQG,aACflC,qBAAX8B,GACRlB,KAAKuB,UAAUF,WAAWF,EAAQG,e,gCAG1BE,GACLA,IAAWxB,KAAKS,MAAML,MACzBE,QAAQC,IAAIiB,GACZxB,KAAKyB,SAAS,CAAErB,IAAKoB,O,gCAGbA,GACLA,IAAWxB,KAAKS,MAAMJ,MACzBC,QAAQC,IAAIiB,GACZxB,KAAKyB,SAAS,CAAEpB,IAAKmB,O,+BAMtB,OAEC,6BACC,wBAAIE,UAAU,WACb,2CACA,uBAAGC,KACF,mDACE3B,KAAKS,MAAML,IAAIkB,WAAa,IAAMtB,KAAKS,MAAMJ,IAAIiB,WACnDM,OAAO,SAASC,IAAI,uBAAsB,uDAC3C,uCACA,4CACA,uCACA,sCAGD,2BAAOC,KAAK,WAAWC,GAAG,cAAcL,UAAU,cAAcM,gBAAc,IAC9E,2BAAOC,QAAQ,gBAEf,yBAAKP,UAAU,WACd,kBAAC,EAAD,CAAatB,IAAKJ,KAAKS,MAAML,IAAKC,IAAKL,KAAKS,MAAMJ,Y,GA9DrCH,IAAMC,WAuElB+B,E,iLAIJ,OACC,yBAAKnC,MAAO,CAAEb,OAAQ,QAASD,MAAO,SAErC,kBAAC,IAAD,CACCkD,iBAAkB,CACjBC,IAAK,CAAC,kDAEPC,YAAa,EACbC,cACC,CAAElC,IAAK,GAAImC,IAAK,KAGjB,kBAAC,EAAD,CACCnC,IAAKJ,KAAKF,MAAMM,IAChBmC,IAAKvC,KAAKF,MAAMO,IAChBJ,KAAK,gB,GAnBeC,IAAMC,WA4BjBK,ICnGKgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a3216c12.chunk.js","sourcesContent":["// import React, { PropTypes, Component } from 'react/addons';\nimport React from 'react'\n// import shouldPureComponentUpdate from 'react-pure-render/function';\n\nconst K_WIDTH = 20;\nconst K_HEIGHT = 20;\n\nconst greatPlaceStyle = {\n    // initially any map object has left top corner at lat lng coordinates\n    // it's on you to set object origin to 0,0 coordinates\n    position: 'absolute',\n    width: K_WIDTH,\n    height: K_HEIGHT,\n    left: -K_WIDTH / 2,\n    top: -K_HEIGHT / 2,\n\n    border: '5px solid #f44336',\n    borderRadius: K_HEIGHT,\n    backgroundColor: 'white',\n    textAlign: 'center',\n    color: '#3f51b5',\n    fontSize: 9,\n    fontWeight: 'bold',\n    padding: 4\n};\n\nexport { greatPlaceStyle };\n\nexport default class MyGreatPlace extends React.Component {\n\n\n    // static defaultProps = {};\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div style={greatPlaceStyle}>\n                {this.props.text}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport './App.css';\nimport mqtt from 'mqtt';\nimport MyGreatPlace from './my_great_place.jsx';\n\n\n// let client = mqtt.connect('mqtt://broker.mqttdashboard.com:8000/mqtt');\nlet lat = 26.444, lon = 91.691582;\nlet top = \"semsLocation\";\nconsole.log('start');\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tlat: lat,\n\t\t\tlon: lon,\n\t\t\tclient: mqtt.connect('mqtt://broker.mqttdashboard.com:8000/mqtt'),\n\t\t};\n\t\tthis.state.client.on('connect', function () {\n\t\t\tconsole.log('mqtt connected');\n\t\t\tthis.subscribe('semsLocation/#', function (err) {\n\t\t\t\tif (!err) {\n\t\t\t\t\tconsole.log('subscribed');\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t\tthis.abhidekhtehain = this.abhidekhtehain.bind(this);\n\t\tthis.state.client.on('message', this.abhidekhtehain);\n\t}\n\n\tabhidekhtehain(topic, message) {\n\t\t// console.log(topic, message.toString());\n\t\tif (topic === (top + '/lat'))\n\t\t\tthis.changeLat(parseFloat(message.toString()));\n\t\telse if (topic === (top + '/lng'))\n\t\t\tthis.changeLon(parseFloat(message.toString()));\n\t}\n\n\tchangeLat(newLat) {\n\t\tif (newLat !== this.state.lat) {\n\t\t\tconsole.log(newLat);\n\t\t\tthis.setState({ lat: newLat });\n\t\t}\n\t}\n\tchangeLon(newLat) {\n\t\tif (newLat !== this.state.lon) {\n\t\t\tconsole.log(newLat);\n\t\t\tthis.setState({ lon: newLat });\n\t\t}\n\t}\n\n\n\trender() {\n\t\treturn (\n\n\t\t\t<div>\n\t\t\t\t<ul className=\"sidebar\">\n\t\t\t\t\t<li>Track Cycle</li>\n\t\t\t\t\t<a href={\n\t\t\t\t\t\t'https://www.google.com/maps/search/?api=1&query='\n\t\t\t\t\t\t+ this.state.lat.toString() + ',' + this.state.lon.toString()}\n\t\t\t\t\t\ttarget='_blank' rel=\"noopener noreferrer\"><li>Directions to my cycle</li></a>\n\t\t\t\t\t<li>Details</li>\n\t\t\t\t\t<li>Where to buy</li>\n\t\t\t\t\t<li>Contact</li>\n\t\t\t\t\t<li>About</li>\n\t\t\t\t</ul>\n\n\t\t\t\t<input type=\"checkbox\" id=\"sidebar-btn\" className=\"sidebar-btn\" defaultChecked />\n\t\t\t\t<label htmlFor=\"sidebar-btn\"></label>\n\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<LiveTracker lat={this.state.lat} lon={this.state.lon} />\n\t\t\t\t</div>\n\t\t\t</div >\n\n\t\t);\n\t}\n\n}\n\nclass LiveTracker extends React.Component {\n\n\trender() {\n\t\t// console.log(lat, lon);\n\t\treturn (\n\t\t\t<div style={{ height: '100vh', width: '100%' }}>\n\n\t\t\t\t<GoogleMapReact\n\t\t\t\t\tbootstrapURLKeys={{\n\t\t\t\t\t\tkey: ['AIzaSyB2j - BLr1 - CgTgSEUjws060kE37S2N - A3A']\n\t\t\t\t\t}}\n\t\t\t\t\tdefaultZoom={8}\n\t\t\t\t\tdefaultCenter={\n\t\t\t\t\t\t{ lat: 26, lng: 91 }\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\t<MyGreatPlace\n\t\t\t\t\t\tlat={this.props.lat}\n\t\t\t\t\t\tlng={this.props.lon}\n\t\t\t\t\t\ttext=\"CYCLE\"\n\t\t\t\t\t/>\n\n\t\t\t\t</GoogleMapReact>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}